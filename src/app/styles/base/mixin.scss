@use "sass:math";

//Адаптивное свойство
@mixin adaptive-value($property, $startSize, $minSize, $type) {
	$addsize: $startSize - $minSize;
	@if type == 1 {
		//Только если меньше контейнера
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addsize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		//Только если больше контейнера
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addsize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addsize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}

// Пример
// .block__body {
// 	@include adaptive-value("padding", 50, 20, 0)
// }

@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src:
			url("@app/fonts/Gilroy/#{$file_name}.woff2") format("woff2"),
			url("@app/fonts/Gilroy/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}

//TO %
@function prc($pxOne, $pxTwo: 100) {
	$result: math.div($pxOne, $pxTwo) * 100%;
	@return $result;
}
//TO REM
@function toRem($px, $current: 14) {
	$result: math.div($px, $current) + rem;
	@return $result;
}
//TO EM
@function toEm($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Currency
@mixin currency ($sym) {
	&::after {
	content: "#{$sym}";
	}
}

//Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}